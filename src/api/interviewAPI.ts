/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Interview API
 * Documentation for interview endpoints
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  AuthResponseDto,
  GetApiProducts200Item,
  GetApiSalesRevenue200Item,
  LoginRequestDto,
  TodaysStatsResponse,
  UserDto
} from '../types'




/**
 * @summary Get User Profile
 */
export const getUserProfile = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    
    return axios.default.get(
      `/api/user`,options
    );
  }


export const getGetUserProfileQueryKey = () => {
    return [`/api/user`] as const;
    }

    
export const getGetUserProfileQueryOptions = <TData = Awaited<ReturnType<typeof getUserProfile>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserProfile>>> = ({ signal }) => getUserProfile({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserProfileQueryError = AxiosError<unknown>


/**
 * @summary Get User Profile
 */

export function useGetUserProfile<TData = Awaited<ReturnType<typeof getUserProfile>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUserProfile>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetUserProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary User login
 */
export const postApiAuthLogin = (
    loginRequestDto: LoginRequestDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AuthResponseDto>> => {
    
    return axios.default.post(
      `/api/auth/login`,
      loginRequestDto,options
    );
  }



export const getPostApiAuthLoginMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAuthLogin>>, {data: LoginRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAuthLogin(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAuthLogin>>>
    export type PostApiAuthLoginMutationBody = LoginRequestDto
    export type PostApiAuthLoginMutationError = AxiosError<void>

    /**
 * @summary User login
 */
export const usePostApiAuthLogin = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAuthLogin>>, TError,{data: LoginRequestDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postApiAuthLogin>>,
        TError,
        {data: LoginRequestDto},
        TContext
      > => {

      const mutationOptions = getPostApiAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get today's stats
 */
export const getApiStatsTodaysStats = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TodaysStatsResponse>> => {
    
    return axios.default.get(
      `/api/stats/todays-stats`,options
    );
  }


export const getGetApiStatsTodaysStatsQueryKey = () => {
    return [`/api/stats/todays-stats`] as const;
    }

    
export const getGetApiStatsTodaysStatsQueryOptions = <TData = Awaited<ReturnType<typeof getApiStatsTodaysStats>>, TError = AxiosError<void>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiStatsTodaysStats>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiStatsTodaysStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiStatsTodaysStats>>> = ({ signal }) => getApiStatsTodaysStats({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiStatsTodaysStats>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiStatsTodaysStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiStatsTodaysStats>>>
export type GetApiStatsTodaysStatsQueryError = AxiosError<void>


/**
 * @summary Get today's stats
 */

export function useGetApiStatsTodaysStats<TData = Awaited<ReturnType<typeof getApiStatsTodaysStats>>, TError = AxiosError<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiStatsTodaysStats>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiStatsTodaysStatsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get top sales products
 */
export const getApiProducts = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiProducts200Item[]>> => {
    
    return axios.default.get(
      `/api/products`,options
    );
  }


export const getGetApiProductsQueryKey = () => {
    return [`/api/products`] as const;
    }

    
export const getGetApiProductsQueryOptions = <TData = Awaited<ReturnType<typeof getApiProducts>>, TError = AxiosError<void>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProducts>>> = ({ signal }) => getApiProducts({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiProductsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProducts>>>
export type GetApiProductsQueryError = AxiosError<void>


/**
 * @summary Get top sales products
 */

export function useGetApiProducts<TData = Awaited<ReturnType<typeof getApiProducts>>, TError = AxiosError<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProducts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiProductsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get sales revenue data
 */
export const getApiSalesRevenue = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiSalesRevenue200Item[]>> => {
    
    return axios.default.get(
      `/api/sales/revenue`,options
    );
  }


export const getGetApiSalesRevenueQueryKey = () => {
    return [`/api/sales/revenue`] as const;
    }

    
export const getGetApiSalesRevenueQueryOptions = <TData = Awaited<ReturnType<typeof getApiSalesRevenue>>, TError = AxiosError<void>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiSalesRevenue>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiSalesRevenueQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSalesRevenue>>> = ({ signal }) => getApiSalesRevenue({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiSalesRevenue>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiSalesRevenueQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSalesRevenue>>>
export type GetApiSalesRevenueQueryError = AxiosError<void>


/**
 * @summary Get sales revenue data
 */

export function useGetApiSalesRevenue<TData = Awaited<ReturnType<typeof getApiSalesRevenue>>, TError = AxiosError<void>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiSalesRevenue>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiSalesRevenueQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




